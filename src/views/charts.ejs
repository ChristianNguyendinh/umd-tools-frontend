<!DOCTYPE html>
<html style="width:100%; height:100%">
<head>
    <% include partials/head.ejs %>
    <% include partials/search-bar-head.ejs %>

    <link rel="stylesheet" href="/css/charts.css">

    <title>UMD CS Upper Level Registration Tracker - Charts</title>

    <style>
        #nav-chart > center {
            color: black;
        }
    </style>
</head>

<body style="width:100%; height:100%;">
    <% include partials/navbar.ejs %>

    <div style="text-align: center; margin-top: 2%">
    <h2>Search for a Course:</h2>
    <form id="search-form" onsubmit="onCourseSearch(); return false;" style="text-align:center;">
        <div style="display: inline-block; width: 100%; height: 100%;">
            <input type="text" id="search-box" style="width: 50%" placeholder="Search... (Ex. CMSC412)" required />
            <button type="submit" class="red-button" id="search-button" style="padding: 5px 10px">Search</button>
        </div>
    </form>
    <div style="width: 80%; margin: 3% 10%">
        <form id="time-form" onsubmit="onRefresh(); return false;" style="float: left; width: 50%; min-width: 300px;">
            <div style="width: 100%; height: 100%; text-align: center;">
                <div style="float:left">
                    <div>
                        From:
                        <input type="date" id="start-time" min="2017-03-30" max="2017-04-22" required />
                    </div>
                    <div>
                        To:  
                        <input type="date" id="end-time" min="2017-03-30" max="2017-04-22" required />
                    </div>
                </div>

                <div style="float:right">
                    Semester: 
                    <br />
                    <select id="semester-select" onchange="semesterChange(this)">
                    </select>
                </div>

                <div style="clear:both; margin-top: 1%">
                    <br />
                    <button type="submit" class="red-button" id="time-button">Refresh</button>
                </div>
            </div>
        </form>

        <div style="float: right; margin: 15px 5px;">
            <button class="test layout-btn" id="top-layout-btn" style="border-top-right-radius: 0; border-bottom-right-radius: 0; float: left;" onclick="changeLayout(this)">
                <img src="/img/glyphicon-rows.png" height="22px"/>
            </button>
            <button class="test layout-btn" id="side-layout-btn" style="border-top-left-radius: 0; border-bottom-left-radius: 0; background-color: lightgray; float: left" onclick="changeLayout(this)">
                <img src="/img/glyphicon-columns.png" height="22px"/>
            </button>
        </div>
    </div>
    <h3 id="info-title" style="clear:both; display: block;">&ensp;</h3>
    </div>


    <script type=text/javascript src="/js/charts.js"></script>
    <script>

        var registrationApiUrl = '<%= registrationApiUrl %>'
        var startDate;
        var endDate;
        var dateString = null;
        var semester;
        var display_wide = false;
        var searchedCourses = new Set();

        // initialize variables for chart building
        init();

        // remove line chart
        function removeGraph(button) {
            var graph = $(button.parentNode)
            setTimeout(function() {
                graph.remove();
            }, 2000);

            // lazy way, fix later
            searchedCourses.delete(graph.attr("class").substring(16));

            graph.fadeOut(500, function() {
                graph.css({"visibility": "hidden", "display": "block"}).animate({width:"toggle"}, 500);
            });
        }

        // create line chart on form submit
        function onCourseSearch() {
            var course = $("#search-box").val();

            if (searchedCourses.has(course)) return;

            searchedCourses.add(course);

            if (dateString) {
                d3.json(registrationApiUrl + semester + "/" + course + "/" + dateString, function(data) {
                    genChart(data[course], course);
                    $("#search-box").val("");
                });
            } else {
                d3.json(registrationApiUrl + semester + "/course/" + course, function(data) {
                    genChart(data[course], course);
                    $("#search-box").val("");
                });
            }
        }

        // Update the time interval
        function onRefresh() {
            var startVal = $("#start-time").val();
            var endVal = $("#end-time").val();

            if (startVal > endVal)
                return;

            // update values from form
            startDate = startVal.substring(5) + "-" + startVal.substring(0, 4);
            endDate = endVal.substring(5) + "-" + endVal.substring(0, 4);
            semester = $("#semester-select :selected").text();

            $("#info-title").html("Data for: <i>" + startDate + "</i> to <i>" + endDate + "</i>");

            // date objects dont convert str to date x browser well, so just use strings
            dateString = startDate + "_" + endDate;
            console.log(dateString)

            // refresh the already drawn classes
            for (var course of searchedCourses) {
                d3.json(registrationApiUrl + semester + "/" + course + "/" + dateString, function(data) {
                    // need a new variable because variable 'course' will be overriden one loop moves
                    // while this function is still asnyc running
                    var courseName = Object.keys(data)[0];
                    console.log(data)
                    updateChart(data[courseName], courseName);
                });
            }
        }

        // change the way the graphs are displayed next to each other
        function changeLayout(button) {
            if (button["id"] == "top-layout-btn") {
                d3.selectAll(".chart-container")
                    .transition()
                    .duration(1000)
                    .style("width", "95%");

                $("#top-layout-btn").css("background-color", "lightgray").blur();
                $("#side-layout-btn").css("background-color", "white");
                display_wide = true;

            } else {
                d3.selectAll(".chart-container")
                    .transition()
                    .duration(1000)
                    .style("width", "45%");

                $("#top-layout-btn").css("background-color", "white");
                $("#side-layout-btn").css("background-color", "lightgray").blur();
                display_wide = false;

            }
        }

        function updateAutoComplete() {
            d3.json(registrationApiUrl + semester + "/courselist", function(data) {
                var searchBox = $("#search-box");

                searchBox.autocomplete({
                    maxHeight: null,
                    lookup: data,
                    onSelect: function(selection) {
                        $("#search-box").val(selection['value']);
                    }
                });

                var regex = ""
                data.forEach(function(d, i) {
                    if (i == 0)
                        regex += d['value'];
                    else
                        regex += "|" + d['value'];
                });

                searchBox.attr("pattern", regex);
            });
        }

        function updateDates() {
            d3.json(registrationApiUrl + semester + "/dates", function(data) {
                var startnode = document.getElementById("start-time");
                var endnode = document.getElementById("end-time");

                var d = new Date()
                var currentDate = (new Date(d.getTime() - (d.getTimezoneOffset() * 60000))).toISOString().slice(0, 10);

                startnode.setAttribute("min", data['start']);
                endnode.setAttribute("min", data['start']);

                if (data['end'] < currentDate) {
                    startnode.setAttribute("max", data['end']);
                    endnode.setAttribute("max", data['end']);
                }
                else {

                    startnode.setAttribute("max", currentDate);
                    endnode.setAttribute("max", currentDate);
                }

                startnode.value = "";
                endnode.value = "";
            });
        }

        function semesterChange(obj) {
            // update semester, dates, autocomplete, and remove charts
            semester = obj.value;
            updateAutoComplete();
            updateDates();
            var chartlist = document.getElementsByClassName("chart-container");
            searchedCourses = new Set();
            dateString = null;
            $("#info-title").html("");

            while(chartlist[0]) {
                chartlist[0].remove();
            }
        }

        // set default semester to be current
        var setSemester = new Promise(function(resolve, reject) {
            d3.json(registrationApiUrl + "currentsemester", function(data) {
                semester = data['currentSemester'];
                resolve();
            });
        });

        // initialize search box for autocomplete and validation
        setSemester.then(function() {
            updateAutoComplete();
            updateDates();
        });

        // initialize semester list
        d3.json(registrationApiUrl + "semesterlist", function(data) {
            var semesterlist = $("#semester-select");

            for (var sem of data) {
                var option = document.createElement("option");
                option.value = sem;
                option.innerHTML = sem;
                if (sem == semester)
                    option.selected = true;

                semesterlist.append(option);
            }
        });

    </script>
</body>
</html>